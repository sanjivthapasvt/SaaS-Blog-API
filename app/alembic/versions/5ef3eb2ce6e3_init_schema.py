"""init schema

Revision ID: 5ef3eb2ce6e3
Revises: 
Create Date: 2025-08-30 09:25:11.468740

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '5ef3eb2ce6e3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tag_title'), ['title'], unique=True)

    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('profile_pic', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('google_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_google_id'), ['google_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_uuid'), ['uuid'], unique=True)

    op.create_table('blog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('thumbnail_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('author', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['author'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('blog', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_blog_slug'), ['slug'], unique=True)
        batch_op.create_index(batch_op.f('ix_blog_title'), ['title'], unique=False)

    op.create_table('userfollowlink',
    sa.Column('follower_id', sa.Integer(), nullable=False),
    sa.Column('following_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['follower_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['following_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('follower_id', 'following_id')
    )
    op.create_table('bloglikelink',
    sa.Column('blog_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blog.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('blog_id', 'user_id')
    )
    op.create_table('blogtaglink',
    sa.Column('blog_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blog.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('blog_id', 'tag_id')
    )
    op.create_table('bookmark',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('blog_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blog.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'blog_id')
    )
    op.create_table('comment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('commented_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_modified', sa.DateTime(), nullable=True),
    sa.Column('blog_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blog.id'], ),
    sa.ForeignKeyConstraint(['commented_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_comment_blog_id'), ['blog_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_comment_created_at'), ['created_at'], unique=False)

    op.create_table('notification',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('blog_id', sa.Integer(), nullable=True),
    sa.Column('triggered_by_user_id', sa.Integer(), nullable=False),
    sa.Column('notification_type', sa.Enum('GENERAL', 'LIKE', 'NEW_BLOG', 'FOLLOW', 'COMMENT', name='notificationtype'), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blog.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['triggered_by_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_notification_blog_id'), ['blog_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_notification_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_notification_notification_type'), ['notification_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_notification_owner_id'), ['owner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_notification_triggered_by_user_id'), ['triggered_by_user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_notification_triggered_by_user_id'))
        batch_op.drop_index(batch_op.f('ix_notification_owner_id'))
        batch_op.drop_index(batch_op.f('ix_notification_notification_type'))
        batch_op.drop_index(batch_op.f('ix_notification_created_at'))
        batch_op.drop_index(batch_op.f('ix_notification_blog_id'))

    op.drop_table('notification')
    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_comment_created_at'))
        batch_op.drop_index(batch_op.f('ix_comment_blog_id'))

    op.drop_table('comment')
    op.drop_table('bookmark')
    op.drop_table('blogtaglink')
    op.drop_table('bloglikelink')
    op.drop_table('userfollowlink')
    with op.batch_alter_table('blog', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blog_title'))
        batch_op.drop_index(batch_op.f('ix_blog_slug'))

    op.drop_table('blog')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_uuid'))
        batch_op.drop_index(batch_op.f('ix_user_username'))
        batch_op.drop_index(batch_op.f('ix_user_google_id'))
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tag_title'))

    op.drop_table('tag')
    # ### end Alembic commands ###
