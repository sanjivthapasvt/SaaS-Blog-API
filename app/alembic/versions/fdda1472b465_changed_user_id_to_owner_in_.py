"""changed user_id to owner in notification model

Revision ID: fdda1472b465
Revises: 638eda8e89b8
Create Date: 2025-08-14 13:39:22.880147

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fdda1472b465'
down_revision: Union[str, Sequence[str], None] = '638eda8e89b8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.add_column(sa.Column('owner', sa.Integer(), nullable=True))

        # Drop only if not SQLite (SQLite rebuilds table, no need to drop explicitly)
        if op.get_context().dialect.name != 'sqlite':
            batch_op.drop_constraint('fk_notification_user_id', type_='foreignkey')

        # Always give the FK a name so Alembic can track it
        batch_op.create_foreign_key(
            'fk_notification_owner',  # Name for the constraint
            'user',                   # Referenced table
            ['owner'],                 # Local column(s)
            ['id']                     # Remote column(s)
        )

        batch_op.drop_column('user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.drop_column('owner')

    # ### end Alembic commands ###
